<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/websocket https://www.springframework.org/schema/websocket/spring-websocket.xsd">

	
	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="com.edu.springshop.shop.controller" />
	
	<!-- 학생을 등록한다 -->
	<beans:bean id="student" class="com.edu.springshop.school.Student"></beans:bean>
	<beans:bean id="bell" class="com.edu.springshop.aop.Bell"></beans:bean>
	<beans:bean id="categoryAdvise" class="com.edu.springshop.aop.CategoryAdvise"></beans:bean>
	
	<!-- 관점(Aspect)을 정의한다 -->
	<!-- <aop:config>
		<aop:aspect ref="bell" id="bellAspect">
			지점등록
			<aop:pointcut expression="execution(public * 패키지명.클래스명.메서드())" id=""/>
			<aop:pointcut expression="execution(public * com.edu.springshop.school.Student..*(..))" id="bellPointCut"/>
			
			시점 등록. 어느 지점에 어느 시점에 관여할 지
			<aop:before method="ding" pointcut-ref="bellPointCut"/>
		</aop:aspect>
		
	</aop:config> -->
	
	<!-- 공통관심 사항인 CategoryAdvise를 Advice로 등록하자 -->
	<aop:config>
		<aop:aspect ref="categoryAdvise" id="categoryAspect">
			<aop:pointcut expression="execution(public * com.edu.springshop.shop.controller..* (..))" id="categoryPointcut"/>
			<!-- categoryPointcut의 전, 후 시점 -->
			<aop:around method="getCategoryList" pointcut-ref="categoryPointcut"/>
		</aop:aspect>
	</aop:config>
	
	<!-- 사용자와 관련된 글로벌 예외 빈 등록 -->
	<beans:bean id="restShopGlobalException" class="com.edu.springshop.aop.RestShopGlobalException"></beans:bean>
	<beans:bean id="shopGlobalException" class="com.edu.springshop.aop.ShopGlobalException"></beans:bean>
	
	<!-- 웹소켓 핸들러 등록 -->
 	<beans:bean id="chatHandler" class="com.edu.springshop.chat.ChatHandler"/>
 	
 	<!-- 웹소켓 설정 -->
	<websocket:handlers>
		<websocket:mapping handler="chatHandler" path="/chat"/>	
		<websocket:handshake-interceptors>
			<beans:bean class="org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor"/>
		</websocket:handshake-interceptors>				
	</websocket:handlers> 
	
	<!-- 구글 로그인 관련된 정보 등록 -->
	<!-- 
	<beans:bean id="googleConnectionFactory" class="org.springframework.social.google.connect.GoogleConnectionFactory">
		구글 클라우드 플랫폼 에서 발급받은 CID + 시크릿 등록
		<beans:property name="clientId" value="728596130251-fnpiamv1sjo9d670rst723ljeuu36llq.apps.googleusercontent.com"></beans:property>
		<beans:property name="clientSecret" value="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"></beans:property>
	</beans:bean>
 -->
	<beans:bean id="googleLogin" class="com.edu.springshop.sns.GoogleLogin">
		<!-- 1) 인증 url 관련 -->
		<!-- 인증화면 링크 URL -->
		<beans:property name="endpoint" value="https://accounts.google.com/o/oauth2/v2/auth"></beans:property>
		<!-- GCP에서 발급받은 CID -->
		<beans:property name="client_id" value="728596130251-fnpiamv1sjo9d670rst723ljeuu36llq.apps.googleusercontent.com"></beans:property>
		<!-- GCP에서 발급받은 secret -->
		<beans:property name="client_secret" value="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"></beans:property>
		<!-- Resource Owner 가 인증할 때, 콜백받을 우리 웹사이트 URI -->
		<beans:property name="redirect_uri" value="http://localhost:8888/sns/google/callback"></beans:property>
		<!-- 콜백 받을 때, 구글이 우리에게 전달할 파라미터의 이름 -->
		<beans:property name="response_type" value="code"></beans:property>
		<!-- Resource Owner로부터 어떠한 정보를 수집할지 그 범위 설정 -->
		<beans:property name="scope" value="https://www.googleapis.com/auth/userinfo.email https://www.googleapis.com/auth/userinfo.profile"></beans:property>
	
	
		<!-- 2) 토큰 요청 관련 -->
		<beans:property name="token_request_url" value="https://oauth2.googleapis.com/token"></beans:property>
		<!-- 모든 sns 사업자가 같은 변수명을 쓴다 -->
		<beans:property name="grant_type" value="authorization_code"></beans:property>
		
		<!-- 3) 회원정보 요청을 위한 url -->
		<beans:property name="userinfo_url" value="https://www.googleapis.com/oauth2/v1/userinfo"></beans:property>
		
	</beans:bean>

	<!-- 카카오 로그인 설정 -->
	<beans:bean id="kakaoLogin" class="com.edu.springshop.sns.KakaoLogin">
		<!-- 1) 인증 url 관련 -->
		<!-- 인증화면 링크 URL -->
		<beans:property name="endpoint" value="https://kauth.kakao.com/oauth/authorize"></beans:property>
		<!-- GCP에서 발급받은 CID -->
		<beans:property name="client_id" value="52d2aa50cff683356d2a34dab71b14ad"></beans:property>
		<!-- Resource Owner 가 인증할 때, 콜백받을 우리 웹사이트 URI -->
		<beans:property name="redirect_uri" value="http://localhost:8888/sns/kakao/callback"></beans:property>
		<!-- 콜백 받을 때, 구글이 우리에게 전달할 파라미터의 이름 -->
		<beans:property name="response_type" value="code"></beans:property>
	
	
		<!-- 2) 토큰 요청 관련 -->
		<beans:property name="token_request_url" value="https://kauth.kakao.com/oauth/token"></beans:property>
		<!-- 모든 sns 사업자가 같은 변수명을 쓴다 -->
		<beans:property name="grant_type" value="authorization_code"></beans:property>
		
		<!-- 3) 회원정보 요청을 위한 url -->
		<beans:property name="userinfo_url" value="https://kapi.kakao.com/v2/user/me"></beans:property>
		
	</beans:bean>
	
	<!-- 네이버 로그인 설정 -->
	<beans:bean id="naverLogin" class="com.edu.springshop.sns.NaverLogin">
		<!-- 1) 인증 url 관련 -->
		<!-- 인증화면 링크 URL -->
		<beans:property name="endpoint" value="https://nid.naver.com/oauth2.0/authorize"></beans:property>
		<!-- GCP에서 발급받은 CID -->
		<beans:property name="client_id" value="ixFkSrs1ByKOVtbBU5DG"></beans:property>
		<beans:property name="client_secret" value="LwCUnR0rQY"></beans:property>
		<!-- Resource Owner 가 인증할 때, 콜백받을 우리 웹사이트 URI -->
		<beans:property name="redirect_uri" value="http://localhost:8888/sns/naver/callback"></beans:property>
		<!-- 콜백 받을 때, 구글이 우리에게 전달할 파라미터의 이름 -->
		<beans:property name="response_type" value="code"></beans:property>
		<!-- 개발자만이 알아보는값 넣어야 함 -->
		<beans:property name="state" value="naver_login_by_dev"></beans:property>
		
	
		<!-- 2) 토큰 요청 관련 -->
		<beans:property name="token_request_url" value="https://nid.naver.com/oauth2.0/token"></beans:property>
		<!-- 모든 sns 사업자가 같은 변수명을 쓴다 -->
		<beans:property name="grant_type" value="authorization_code"></beans:property>
		
		<!-- 3) 회원정보 요청을 위한 url -->
		<beans:property name="userinfo_url" value="https://openapi.naver.com/v1/nid/me"></beans:property>
		
	</beans:bean>

</beans:beans>

