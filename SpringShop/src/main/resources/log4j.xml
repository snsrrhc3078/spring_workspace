<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE log4j:configuration PUBLIC "-//APACHE//DTD LOG4J 1.2//EN" "log4j.dtd">
<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">

	<!--
	  System.out.println() 은 개발할때는 잘 못느끼지만, 대형 어플리케이션의 모든 코드마다
	  이 방법으로 로그를 출력하게 되면, 개발이 끝난 후 성능저하를 방지하기 위해 일일이 코드를 열어서
	  주석으로 막야아 한다.. 그러다가 운영중 또 에러가 발생하면 또 해당 코드를 찾아서 주석을 풀어줘야 한다..
	  그렇기 때문에 유지보수성이 떨어진다
	  
	  이를 해결하기 위해 Logger를 이용한다
	  	로거를 이용하게 되면, 개발이 끝난 후 해당 로거를 주석으로 막는게
	  	아니라 설정으로 조절할 수 있다..
	  	
	  로거레벨(왼쪽이 심각도가 낮고 오른쪽이 높다))
	  TRACE < DEBUG < INFO < WARN < ERROR 
	  -->

	<!-- Appenders -->
	<appender name="console" class="org.apache.log4j.ConsoleAppender">
		<param name="Target" value="System.out" />
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="%-5p: %c - %m%n" />
		</layout>
	</appender>
	
	<!-- Application Loggers -->
	<logger name="com.edu.springshop">
		<level value="info" />
	</logger>
	<!-- 
	3rdparty Loggers
	<logger name="org.springframework.core">
		<level value="info" />
	</logger>
	
	<logger name="org.springframework.beans">
		<level value="info" />
	</logger>
	
	<logger name="org.springframework.context">
		<level value="info" />
	</logger>

	<logger name="org.springframework.web">
		<level value="info" />
	</logger> -->

	<!-- Root Logger -->
	<root>
		<priority value="error" />
		<appender-ref ref="console" />
	</root>
	
</log4j:configuration>
