<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/jee https://www.springframework.org/schema/jee/spring-jee.xsd
	http://www.springframework.org/schema/tx https://www.springframework.org/schema/tx/spring-tx.xsd
	http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<!-- 스프링의 트랜잭션 등의 도움을 받기 위해서는,
	스프링이 db 커넥션을 취득해야 한다.. 따라서 스프링에서
	jndi를 검색하여 커넥션을 보유하자 -->
	
	<context:component-scan base-package="com.edu.springboard.model"></context:component-scan>
	
	<jee:jndi-lookup 
	id="dataSource"
	jndi-name="jdbc/oracle"
	resource-ref="true"></jee:jndi-lookup>
	
	<!-- 기술에 따른 트랜잭션 매니저를 빈으로 등록
	JDBC, mybatis - DataSourceTransactionManager
	 hibernate - HibernateTransactionManager
	 -->
	 <bean id="dataSourceTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
	 p:dataSource-ref="dataSource"></bean>
	
	<!-- sqlSession을 얻기 위한 bean 등록 
		원래 mybatis 가 취득했던 커네션을 스프링이 뺏었기 때문에, datasource-ref로
		db정보를 sqlsessionfactory에 넣어주자-->
	<bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean" p:dataSource-ref="dataSource"
	p:configLocation="classpath:com/edu/springboard/mybatis/config.xml"></bean>
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactoryBean"></constructor-arg>
	</bean>
	
	<!-- 
		트랜잭션을 적용하는 방법은 크게 2가지
		1) xml에서 적용하는 방식 - 선언적 방식
			- 일괄 적용시 유리함
		2) java 코드에서 어노테이션을 이용하는 방법
			- 개별적 적용시 유리
	 -->
	 <aop:config>
	 	<!-- 트랜잭션을 어떠한 메서드들에 적용할지 패턴을 명시 -->
	 	<aop:pointcut expression="execution(public * com.edu.springboard.model..*Impl.*(..))" id="txcut"/>
	 	<aop:advisor pointcut-ref="txcut" advice-ref="txAdvice"/>
	 </aop:config>
	 
	 <!-- 현재 어플리케이션이 사용중인 db연동기술 적용 -->
	 <tx:advice id="txAdvice" transaction-manager="dataSourceTransactionManager">
	 	<tx:attributes>
	 		<tx:method name="update" propagation="REQUIRED"/>
	 	</tx:attributes>
	 </tx:advice>
	 
</beans>
